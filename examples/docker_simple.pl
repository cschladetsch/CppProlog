% Simplified Prolog Docker Generator
% Demonstrates basic Dockerfile generation using Prolog

% ============================================================================
% Basic Docker Instruction Facts
% ============================================================================

% Docker instruction validation
valid_instruction(from(Image)) :- atom(Image).
valid_instruction(run(Command)) :- atom(Command).
valid_instruction(copy(Source, Dest)) :- atom(Source), atom(Dest).
valid_instruction(workdir(Dir)) :- atom(Dir).
valid_instruction(user(User)) :- atom(User).
valid_instruction(cmd(Command)) :- atom(Command).

% ============================================================================
% Package Lists
% ============================================================================

% Essential build packages for C++23
essential_build_packages([
    'build-essential',
    'cmake', 
    'git',
    'ninja-build',
    'clang-15'
]).

% Runtime packages (minimal)
essential_runtime_packages([
    'libc++1-15',
    'libc++abi1-15'
]).

% Development packages
development_packages([
    'gdb',
    'valgrind',
    'vim'
]).

% ============================================================================
% Build Strategies
% ============================================================================

% Simple production build strategy
production_strategy([
    from('ubuntu:22.04'),
    run('apt-get update && apt-get install -y build-essential cmake'),
    workdir('/build'),
    copy('.', '.'),
    run('cmake -B build && make -C build'),
    user('prolog'),
    cmd('./build/bin/prolog_interpreter')
]).

% Development strategy
development_strategy([
    from('ubuntu:22.04'),
    run('apt-get update && apt-get install -y build-essential cmake gdb'),
    workdir('/workspace'),
    copy('.', '.'),
    run('cmake -B build && make -C build'),
    cmd('/bin/bash')
]).

% ============================================================================
% Dockerfile Generation
% ============================================================================

% Generate production Dockerfile
generate_production_dockerfile :-
    write('# CppLProlog Production Dockerfile'), nl,
    write('# Generated by Prolog'), nl, nl,
    production_strategy(Instructions),
    generate_all_instructions(Instructions).

% Generate development Dockerfile  
generate_development_dockerfile :-
    write('# CppLProlog Development Dockerfile'), nl,
    write('# Generated by Prolog'), nl, nl,
    development_strategy(Instructions),
    generate_all_instructions(Instructions).

% Generate all instructions from a list
generate_all_instructions([]).
generate_all_instructions([Instruction|Rest]) :-
    generate_single_instruction(Instruction),
    generate_all_instructions(Rest).

% Generate individual instruction
generate_single_instruction(from(Image)) :-
    write('FROM '), write(Image), nl.

generate_single_instruction(run(Command)) :-
    write('RUN '), write(Command), nl.

generate_single_instruction(copy(Source, Dest)) :-
    write('COPY '), write(Source), write(' '), write(Dest), nl.

generate_single_instruction(workdir(Dir)) :-
    write('WORKDIR '), write(Dir), nl.

generate_single_instruction(user(User)) :-
    write('USER '), write(User), nl.

generate_single_instruction(cmd(Command)) :-
    write('CMD '), write(Command), nl.

% ============================================================================
% Analysis Predicates
% ============================================================================

% Check if strategy uses non-root user
has_security_user(Strategy) :-
    member(user(_), Strategy).

% Count instructions of specific type
count_run_instructions([], 0).
count_run_instructions([run(_)|Rest], Count) :-
    count_run_instructions(Rest, RestCount),
    Count is RestCount + 1.
count_run_instructions([_|Rest], Count) :-
    count_run_instructions(Rest, Count).

% Estimate build time (rough heuristic)
estimate_build_time(Strategy, Minutes) :-
    count_run_instructions(Strategy, RunCount),
    Minutes is RunCount * 3.

% ============================================================================
% Interactive Demo
% ============================================================================

demo_docker_generation :-
    write('=== CppLProlog Docker Generator Demo ==='), nl, nl,
    
    write('1. Generating Production Dockerfile:'), nl,
    write('====================================='), nl,
    generate_production_dockerfile,
    nl,
    
    write('2. Generating Development Dockerfile:'), nl,
    write('====================================='), nl, 
    generate_development_dockerfile,
    nl,
    
    write('3. Strategy Analysis:'), nl,
    write('===================='), nl,
    production_strategy(ProdStrategy),
    ( has_security_user(ProdStrategy) ->
        write('✓ Production strategy uses non-root user'), nl
    ;   write('⚠ Production strategy runs as root'), nl
    ),
    
    estimate_build_time(ProdStrategy, ProdTime),
    write('Estimated production build time: '), write(ProdTime), write(' minutes'), nl,
    
    development_strategy(DevStrategy),
    estimate_build_time(DevStrategy, DevTime),
    write('Estimated development build time: '), write(DevTime), write(' minutes'), nl.

% ============================================================================
% Example Queries
% ============================================================================

% To generate production Dockerfile:
% ?- generate_production_dockerfile.

% To generate development Dockerfile:
% ?- generate_development_dockerfile.

% To run full demo:
% ?- demo_docker_generation.

% To validate an instruction:
% ?- valid_instruction(from('ubuntu:22.04')).

% To check strategy security:
% ?- production_strategy(S), has_security_user(S).