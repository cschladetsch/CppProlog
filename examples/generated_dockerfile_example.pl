% Example generated Dockerfile using Prolog rules
% This demonstrates how Prolog can generate infrastructure code

% Query to generate this dockerfile:
% ?- generate_cppprolog_dockerfile.

generate_cppprolog_dockerfile :-
    write('# CppLProlog Multi-Stage Dockerfile'), nl,
    write('# Generated by Prolog Docker Generator'), nl,
    write('# Optimized for build caching and security'), nl, nl,
    
    % Stage 1: Builder
    write('# ============================================'), nl,
    write('# Stage 1: Build Environment'), nl, 
    write('# ============================================'), nl,
    write('FROM ubuntu:22.04 AS builder'), nl, nl,
    
    write('# Install build dependencies (optimized layer caching)'), nl,
    essential_build_packages(BuildPackages),
    format_package_install(BuildPackages, BuildCmd),
    write('RUN '), write(BuildCmd), nl, nl,
    
    write('# Set up modern C++ environment'), nl,
    write('ENV CC=clang-15'), nl,
    write('ENV CXX=clang++-15'), nl,
    write('ENV CMAKE_BUILD_TYPE=Release'), nl, nl,
    
    write('# Create build directory'), nl,
    write('WORKDIR /build'), nl, nl,
    
    write('# Copy dependency files first (better layer caching)'), nl,
    write('COPY CMakeLists.txt .'), nl,
    write('COPY External/ External/'), nl, nl,
    
    write('# Initialize git submodules'), nl,
    write('RUN git submodule update --init --recursive || true'), nl, nl,
    
    write('# Copy source files'), nl,
    write('COPY src/ src/'), nl,
    write('COPY tests/ tests/'), nl,
    write('COPY examples/ examples/'), nl,
    write('COPY benchmarks/ benchmarks/'), nl, nl,
    
    write('# Configure and build with optimization'), nl,
    write('RUN cmake -B build -G Ninja \\'), nl,
    write('    -DCMAKE_BUILD_TYPE=Release \\'), nl,
    write('    -DCMAKE_CXX_COMPILER=clang++-15 \\'), nl,
    write('    -DCMAKE_CXX_STANDARD=23 \\'), nl,
    write('    && ninja -C build'), nl, nl,
    
    write('# Run tests to ensure build quality'), nl,
    write('RUN cd build && ./bin/prolog_tests'), nl, nl,
    
    % Stage 2: Runtime
    write('# ============================================'), nl,
    write('# Stage 2: Production Runtime'), nl,
    write('# ============================================'), nl,
    write('FROM ubuntu:22.04 AS runtime'), nl, nl,
    
    write('# Install minimal runtime dependencies'), nl,
    essential_runtime_packages(RuntimePackages),
    format_package_install(RuntimePackages, RuntimeCmd),
    write('RUN '), write(RuntimeCmd), nl, nl,
    
    write('# Security: Create non-root user'), nl,
    write('RUN groupadd -r prolog && useradd -r -g prolog prolog'), nl, nl,
    
    write('# Create application directory'), nl,
    write('WORKDIR /app'), nl, nl,
    
    write('# Copy built executables from builder stage'), nl,
    write('COPY --from=builder /build/build/bin/ ./bin/'), nl,
    write('COPY --from=builder /build/examples/*.pl ./examples/'), nl, nl,
    
    write('# Set proper ownership'), nl,
    write('RUN chown -R prolog:prolog /app'), nl, nl,
    
    write('# Switch to non-root user'), nl,
    write('USER prolog'), nl, nl,
    
    write('# Health check'), nl,
    write('HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\'), nl,
    write('  CMD ./bin/prolog_tests --gtest_filter="*Basic*" || exit 1'), nl, nl,
    
    write('# Default command'), nl,
    write('CMD ["./bin/prolog_interpreter"]'), nl, nl,
    
    % Stage 3: Development
    write('# ============================================'), nl,
    write('# Stage 3: Development Environment'), nl,
    write('# ============================================'), nl,
    write('FROM builder AS development'), nl, nl,
    
    write('# Install development tools'), nl,
    development_packages(DevPackages),
    format_package_install(DevPackages, DevCmd),
    write('RUN '), write(DevCmd), nl, nl,
    
    write('# Keep source for development'), nl,
    write('WORKDIR /workspace'), nl,
    write('COPY . .'), nl, nl,
    
    write('# Build debug version'), nl,
    write('RUN cmake -B build-debug -G Ninja \\'), nl,
    write('    -DCMAKE_BUILD_TYPE=Debug \\'), nl,
    write('    -DCMAKE_CXX_COMPILER=clang++-15 \\'), nl,
    write('    && ninja -C build-debug'), nl, nl,
    
    write('# Development command'), nl,
    write('CMD ["/bin/bash"]'), nl, nl,
    
    % Stage 4: Benchmark
    write('# ============================================'), nl,
    write('# Stage 4: Benchmarking Environment'), nl,
    write('# ============================================'), nl,
    write('FROM runtime AS benchmark'), nl, nl,
    
    write('# Copy benchmark executables'), nl,
    write('COPY --from=builder /build/build/bin/prolog_benchmarks ./bin/'), nl, nl,
    
    write('# Create results directory'), nl,
    write('RUN mkdir -p /app/benchmark-results'), nl, nl,
    
    write('# Benchmark command with JSON output'), nl,
    write('CMD ["./bin/prolog_benchmarks", \\'), nl,
    write('     "--benchmark_format=json", \\'), nl,
    write('     "--benchmark_out=/app/benchmark-results/results.json"]'), nl.

% Helper predicate to format package installation
format_package_install(Packages, Command) :-
    atomic_list_concat(Packages, ' ', PackageString),
    atomic_list_concat([
        'apt-get update && apt-get install -y',
        PackageString,
        '&& apt-get clean && rm -rf /var/lib/apt/lists/*'
    ], ' ', Command).

% Query examples:
% ?- generate_cppprolog_dockerfile.
% ?- essential_build_packages(P).
% ?- essential_runtime_packages(P). 
% ?- development_packages(P).